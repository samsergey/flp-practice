Функции в математике и в программировании.
Понятие чистой функции (прозрачной по ссылкам). Достоинства и недостатки их использования.
Понятие анонимной функции. Зачем они нужны?
Ленивые вычисления. Ленивые коллекции. Примеры риспользования.
Индуктивные типы данных, свёртка. Примеры (список, натуральные числа, дерево)
Свёртка, выражение через свёртку цикличных конструкций (отображения, фильтрации и т.д.).
Алгебраические типы данных. Принципы построения и обработки.
Рекурсия. Обоснованность рекурсии. Структурная рекурсия.
Полугруппы и моноиды. Примеры моноидов и их использование.
Понятие композиции функций. Примеры использования.
Функторы, аппликативные функторы и монады. Примеры использования.
Тип Maybe a назначение, свойства.
Тип [a] назначение, свойства.

Императивное и декларативное программирование
Принципы функционалного программирования.
Принципы процедурного программирования.
Принципы стеково-ориентированного программирования.
Принципы объектно-ориентированного программирования.
Вычислители: Конечный автомат, автомат с магазинной памятью, машина Тьюринга.
Полнота языка программирования по Тьюрингу.
Типы в языках программирования. Назначение, примеры определения и использования.
Системы типизации. Динамическая и статическая. Сильная и слабая. Структурная и номинативная.
Синтаксис и семантика в языках программирования.
Формальная грамматика. Пример определения.
Формальная грамматика. Абстрактное синтаксическое дерево. Пример разбора.
Формальная грамматика. Леворекурсивная и праворекурсивная.
Метод рекрсивного спуска. Ограничесния метода.
Трансляция выражения в ОПН и его интерпретация.
Классификация грамматик Хомского.


* Лекция 1. Введение 
** История ФП

** Необходимость сегодняшнего дня в ФП
*** Закон Мура
    - Удвоение числа транзисторов на микросхеме каждые полтора года
    - Достигло предела в 2010 году -- появились многоядерные процессоры
    - тактовая частота достигла предела в 2003 г   - 2.5 ГГц
    - мощность -- в 2005 г
*** Проблема паралеллизации программ
    - изменяемое состояние
    - блокировки  
*** Тестирование и верификация программ
    - AssertEquals(f(x), f(x))
*** Разочарование в ОО модели
    - неизбежность глобального состояния
    - инкапсуляция 
    - наследование

** Преимущества ФП
*** Понижение степени адгезии в коде
*** Повышение модульности программ
*** Повышение надёжности программ
    - Формальная верификация
    - Осмысленность тестирования
    - Простота составных частей
*** Теоретическая согласованность
*** Простота переносимости и паспараллеливания программ

** Недостатки ФП 
*** Высокий уровень вхождения
*** Высокие требования к ресурсам
*** Сложный менеджмент памяти
*** Сложные трансляторы

** История Haskell

* Лекция 2. Функции в математике и программировании
** Функции в математике 
** абстракция
*** формула (анонимная)
    - sqr
    - mean
    - abs
    - sin(x^2)
*** словесное описание
    - функция Дирихле
    - логарифм
*** алгоритм или рекурсивное определение
    - гамма-функция Г(x+1) = x Г(x), Г(1) = 1
*** таблица (график)
    - булевы функции
    - свойства материалов
*** уравнение
    - функциональное, дифференциальное
*** Определение функции синус

** Функции в программировании
*** Определение
    - назначение
    - тело
    - аргументы формальные и фактические
** Понятие чистоты функции
*** Побочный эффект
*** Программы как электрические схемы
*** замена функции результатом
*** прозрачность по ссылкам
*** исключение неиспользуемого кода
*** отсутствие времени

** Функции, как объекты первого класса
   - константы, строки, структуры или объекты
   - массивы в С++

** Переменные и изменяемое состояние
*** семантические отличия от математики
*** необходимость в состоянии и времени
    - случайные числа
    - ввод-вывод
    - обращение к файловой системе и времени

** Функциональная программа
   - Композиция прозрачных по ссылкам чистых функций
   - нет переменных и изменяемого состояния
   - тонкая оболочка между программой и "реальным миром"
   - повторное использование кода через полиморфизм
   - свойства типов и программ не придумываются, а открываются 
     
* Лекция 3. Типы
** Множества в математике
*** Способы определения
    Перечислением (Bool, алфавит, дни недели)
    Определяющей функцией (чётные числа, интервалы)
    Рекурсивно (натуральные числа, графы, последовательности)
    Алгебраически (∪, ∩, \, ×, ¬)
*** Операции над элементами множеств
    Отображения
    Отношения
    Эндоморфизмы

** Типы в программировании
*** Назначение 
*** Системы типизации
*** Способы определния типов пользователя в ООП
*** Интерфейсы в ООП
    IEquatable, IEnumerable

** Алгебраические типы
*** Понятие суммы типов
*** Понятие произведения типов
*** Единичный и пустой типы
*** Функциональный тип
*** Алгебра типов

** Типы в Haskell
*** Базовые типы
*** Декларация типа
    - сумма
     Bool
     Maybe
     Either
    - произведение
     (,)
     []
     Point, Rational  
    - функциональный тип
*** Сопоставление с образцом
*** Каррирование
    - Следствие алгебраических свойств типов
    - Синтаксическая однородность
     f x = expr ≡ f = \x -> expr
     f x y = expt ≡ f x = \y -> expr ≡ f = \x -> \y -> expr
    - ассоциативность аппликации и конструктора ->
    - Частичное определение  

** Полиморфизм
   length, reverse, 
*** Программа, как доказательство теоремы
    | a -> a                         | id                     |
    | a -> b -> a                    | const                  |
    | a -> b -> b                    | const id               |
    | (a, b) -> a                    | fst                    |
    | [a] -> a                       | head                   |
    | [a] -> [a]                     | tail,reverse,take 5... |
    | [a] -> [b] -> [(a, b)]         | zip                    |
    | (a -> b) -> a -> b             | ($)                    |
    | (b -> c) -> (a -> b) -> a -> c | (.)                    |
** Классы типов
*** Необходимость в ограничениях 
*** Обозначение и определение
*** Примеры
    Eq
    Ord
    Show
    Num
*** Связь с интерфейсами ООП
 
** Вывод типов
   - вывод типов в C#
   - вывод типов в Haskell
   
* Лекция 4. Рекурсия и коданные
** Мотивирующий пример
  - gcd методом Эвклида
  - суммирование ряда
  - поиск в бинарном дереве
** Рекурсивные типы данных (Не задерживаться!!)
*** Натуральные числа
*** Списки
*** Деревья
*** Арифметические выражения
** Обоснованность рекурсии
*** Вполне обоснованная рекурсия
*** Структурно обоснованная рекурсия
** Рекурсивная реализация циклов
*** Рекурсивный и итеративный процессы
*** Хвостовая рекурсия
------------------------------------------------------------
** Рекурсивные схемы
*** правая свёртка списка
*** левая свёртка списка
*** свёртка для натуральных чисел 
    - изоморфизм натуральных чисел и списков
*** свёртка для дерева
** Корекурсия и коданные
*** анаморфизм
*** ленивые вычисления
*** мемоизация
** Свёртка в С#
* Лекция 5. Алгебраические структуры и Функторы
** Полугруппы, моноиды 
*** Определение
*** Примеры
    - (N, +, 0), (N, *, 1)
    - (R, max, -∞),
    - ([a],++,[])
    - (Bool,∨,F), (Bool,∧,T)
    - матрицы (сложение, умножение)
    - гистограммы, выборки и нормальное распределение
    - отображения, кофигурации
    - эндоморфизмы
    - ()
*** Произведение и функции от моноидов
*** Ассоциативность и параллельные вычисления
** Функторы
** Алгебры
   - Линейные алгебры
     - векторы, матрицы
     - геометрические преобразования
     - цвета
     - колебания (звуки, изображения, моды)
** Пример Алгебра Де Моргана
   - Булева алгебра
   - Сопротивления, ёмкости
   - пружины и демпферы, неньютоновские жидкости
   - теплопроводность
   - нечёткая логика
   - графы
   - таблицы
   - типы
   - вычислительные процессы
   - грамматики
   - алгоритм Флойда-Уоршалла (min,+,-∞, 0)
* Лекция 6. Абстрактные типы данных
** Понятие O()
*** эффективность
*** амортизированная эффективность
** Опциональный тип
*** Операции
    - maybe
*** Функториальные свойства
*** Свёртка
*** Реализация
**** Haskell
     Maybe a
     Either a b
**** C#
     nullable
** Список
*** Операции
    - null
    - cons
    - head
    - tail
    - append
*** Функториальные свойства
*** Свёртка
*** Реализация
**** Haskell
     []
**** C#
     List
**** JavaScript
     array
** DList
** Массив (вектор)
*** Операции
    - at
    - update
*** Свёртка
*** Реализация
**** Haskell
     Array
**** C#
     []
**** JavaScript
     array
** Стек
*** Операции
    - pop
    - push
    - peek
*** Свёртка
*** Реализация
**** Haskell
     []
**** C#
     Stack
**** JavaScript
     array
** Очередь
*** Операции
    - enq
    - deq
    - peek
*** Свёртка
*** Реализация
**** Haskell
     Queue [a] [a]
**** C#
     Stack
** Множество
*** Операции
    - empty
    - element
    - include
    - delete
    - union, intersect, complement
*** Функториальные свойства
*** Реализация
**** Haskell
     Set
**** C#
     HashSet
** Отображение (словарь)
*** Операции
    - insert
    - lookup
    - remove
*** Функториальные свойства
*** Реализация
**** Haskell
     Map
**** C#
     Dictionary
**** JavaScript
     Object
** Бинарное дерево
** Куча
   HeapT
** Подвешенное дерево
** Очередь с приоритетом
   Data.FingerTree.PSQueue
* Лекция 7. Грамматика и языки
* Лекция 8. Примеры грамматик
*** строки, начинающиеся и заканчивающиеся одинаковыми символами
*** строки, содержащие точно одну и точно две единицы
*** строки не содержащие последовательных нулей
- A → aA, A → abc.
- S → aSa, S → bSb, S → ε
- S → 00S | 11F, F → 00F | ε
*** Присваивание
*** Арифметика, логика
*** Определение цикла
*** Условный оператор
**** неоднозначность условного оператора
** Форма БНФ 
** Примеры интерпретации языков
*** стековые языки
*** рекурсивный спуск
** Транслирующие грамматики
