* Лекция 1. Введение 
** История ФП

** Необходимость сегодняшнего дня в ФП
*** Закон Мура
    - Удвоение числа транзисторов на микросхеме каждые полтора года
    - Достигло предела в 2010 году -- появились многоядерные процессоры
    - тактовая частота достигла предела в 2003 г   - 2.5 ГГц
    - мощность -- в 2005 г
*** Проблема паралеллизации программ
    - изменяемое состояние
    - блокировки  
*** Тестирование и верификация программ
    - AssertEquals(f(x), f(x))
*** Разочарование в ОО модели
    - неизбежность глобального состояния
    - инкапсуляция 
    - наследование

** Преимущества ФП
*** Понижение степени адгезии в коде
*** Повышение модульности программ
*** Повышение надёжности программ
    - Формальная верификация
    - Осмысленность тестирования
    - Простота составных частей
*** Теоретическая согласованность
*** Простота переносимости и паспараллеливания программ

** Недостатки ФП 
*** Высокий уровень вхождения
*** Высокие требования к ресурсам
*** Сложный менеджмент памяти
*** Сложные трансляторы

** История Haskell

* Лекция 2. Функции в математике и программировании
** Функции в математике 
** абстракция
*** формула (анонимная)
    - sqr
    - mean
    - abs
    - sin(x^2)
*** словесное описание
    - функция Дирихле
    - логарифм
*** алгоритм или рекурсивное определение
    - гамма-функция Г(x+1) = x Г(x), Г(1) = 1
*** таблица (график)
    - булевы функции
    - свойства материалов
*** уравнение
    - функциональное, дифференциальное
*** Определение функции синус

** Функции в программировании
*** Определение
    - назначение
    - тело
    - аргументы формальные и фактические
** Понятие чистоты функции
*** Побочный эффект
*** Программы как электрические схемы
*** замена функции результатом
*** прозрачность по ссылкам
*** исключение неиспользуемого кода
*** отсутствие времени

** Функции, как объекты первого класса
   - константы, строки, структуры или объекты
   - массивы в С++

** Переменные и изменяемое состояние
*** семантические отличия от математики
*** необходимость в состоянии и времени
    - случайные числа
    - ввод-вывод
    - обращение к файловой системе и времени

** Функциональная программа
   - Композиция прозрачных по ссылкам чистых функций
   - нет переменных и изменяемого состояния
   - тонкая оболочка между программой и "реальным миром"
   - повторное использование кода через полиморфизм
   - свойства типов и программ не придумываются, а открываются 

* Лекция 3. Типы
** Множества в математике
*** Способы определения
    Перечислением
    Определяющей функцией
    Рекурсивно
    Алгебраически (∪, ∩, \, ×, ¬)
*** Операции над элементами множеств
    Отображения
    Отношения
    Эндоморфизмы

** Типы в программировании
*** Назначение 
*** Системы типизации
*** Способы определния типов пользователя в ООП
*** Интерфейсы в ООП
    IEquatable, IEnumerable

** Алгебраические типы
*** Понятие суммы типов
*** Понятие произведения типов
*** Единичный и пустой типы
*** Функциональный тип
*** Алгебра типов

** Типы в Haskell
*** Базовые типы
*** Декларация типа
    - сумма
     Bool
     Maybe
     Either
    - произведение
     (,)
     []
     Point, Rational  
    - функциональный тип
*** Сопоставление с образцом
*** Каррирование
    - Следствие алгебраических свойств типов
    - Синтаксическая однородность
     f x = expr ≡ f = \x -> expr
     f x y = expt ≡ f x = \y -> expr ≡ f = \x -> \y -> expr
    - ассоциативность аппликации и конструктора ->
    - Частичное определение  

** Полиморфизм
   length, reverse, 
*** Программа, как доказательство теоремы
    | a -> a                         | id                     |
    | a -> b -> a                    | const                  |
    | a -> b -> b                    | const id               |
    | (a, b) -> a                    | fst                    |
    | [a] -> a                       | head                   |
    | [a] -> [a]                     | tail,reverse,take 5... |
    | [a] -> [b] -> [(a, b)]         | zip                    |
    | (a -> b) -> a -> b             | ($)                    |
    | (b -> c) -> (a -> b) -> a -> c | (.)                    |
** Классы типов
*** Необходимость в ограничениях 
*** Обозначение и определение
*** Примеры
    Eq
    Ord
    Show
    Num
*** Связь с интерфейсами ООП
 
** Вывод типов
   - вывод типов в C#
   - вывод типов в Haskell
   
